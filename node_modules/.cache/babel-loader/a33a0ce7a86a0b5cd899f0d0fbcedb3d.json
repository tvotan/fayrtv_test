{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend}from'recharts';import{serverPath}from'../../utils';var timeSeriesUrl=serverPath+\"/timeSeries\".concat(window.location.search);var Debug=function Debug(){var _data$;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];useEffect(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,json;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(timeSeriesUrl);case 2:response=_context.sent;_context.next=5;return response.json();case 5:json=_context.sent;json.reverse();setData(json);return _context.abrupt(\"return\",undefined);case 9:case\"end\":return _context.stop();}}},_callee);})),[]);var keys=Object.keys((_data$=data[0])!==null&&_data$!==void 0?_data$:{});return/*#__PURE__*/React.createElement(React.Fragment,null,keys.map(function(key){return/*#__PURE__*/React.createElement(LineChart,{width:1300,height:400,data:data,margin:{top:5,bottom:5}},/*#__PURE__*/React.createElement(CartesianGrid,null),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"time\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:key,stroke:\"#8884d8\"}));}));};export default Debug;","map":{"version":3,"sources":["/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test/src/components/Debug/Debug.tsx"],"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","serverPath","timeSeriesUrl","window","location","search","Debug","data","setData","fetch","response","json","reverse","undefined","keys","Object","map","key","top","bottom"],"mappings":"igBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OACEC,SADF,CAEEC,IAFF,CAGEC,KAHF,CAIEC,KAJF,CAKEC,aALF,CAMEC,OANF,CAOEC,MAPF,KAQO,UARP,CASA,OAASC,UAAT,KAA2B,aAA3B,CAEA,GAAMC,CAAAA,aAAa,CAAGD,UAAU,sBAAiBE,MAAM,CAACC,QAAP,CAAgBC,MAAjC,CAAhC,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,0BACMd,QAAQ,CAAC,EAAD,CADd,wCACXe,IADW,eACLC,OADK,eAElBf,SAAS,sEACN,2KACwBgB,CAAAA,KAAK,CAACP,aAAD,CAD7B,QACOQ,QADP,qCAEoBA,CAAAA,QAAQ,CAACC,IAAT,EAFpB,QAEOA,IAFP,eAGCA,IAAI,CAACC,OAAL,GACAJ,OAAO,CAACG,IAAD,CAAP,CAJD,gCAKQE,SALR,wDADM,GAQP,EARO,CAAT,CAUA,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACD,IAAP,SAAYP,IAAI,CAAC,CAAD,CAAhB,iCAAuB,EAAvB,CAAb,CACA,mBACE,wCACGO,IAAI,CAACE,GAAL,CAAS,SAACC,GAAD,qBACR,oBAAC,SAAD,EACE,KAAK,CAAE,IADT,CAEE,MAAM,CAAE,GAFV,CAGE,IAAI,CAAEV,IAHR,CAIE,MAAM,CAAE,CACNW,GAAG,CAAE,CADC,CAENC,MAAM,CAAE,CAFF,CAJV,eASE,oBAAC,aAAD,MATF,cAUE,oBAAC,KAAD,EAAO,OAAO,CAAC,MAAf,EAVF,cAWE,oBAAC,KAAD,MAXF,cAYE,oBAAC,OAAD,MAZF,cAaE,oBAAC,MAAD,MAbF,cAcE,oBAAC,IAAD,EAAM,IAAI,CAAC,UAAX,CAAsB,OAAO,CAAEF,GAA/B,CAAoC,MAAM,CAAC,SAA3C,EAdF,CADQ,EAAT,CADH,CADF,CAsBD,CAnCD,CAqCA,cAAeX,CAAAA,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { serverPath } from '../../utils';\n\nconst timeSeriesUrl = serverPath + `/timeSeries${window.location.search}`;\n\nconst Debug = () => {\n  const [data, setData] = useState([]);\n  useEffect(\n    (async () => {\n      const response = await fetch(timeSeriesUrl);\n      const json = await response.json();\n      json.reverse();\n      setData(json);\n      return undefined;\n    }) as any,\n    []\n  );\n  const keys = Object.keys(data[0] ?? {});\n  return (\n    <>\n      {keys.map((key) => (\n        <LineChart\n          width={1300}\n          height={400}\n          data={data}\n          margin={{\n            top: 5,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis dataKey=\"time\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey={key} stroke=\"#8884d8\" />\n        </LineChart>\n      ))}\n    </>\n  );\n};\n\nexport default Debug;\n"]},"metadata":{},"sourceType":"module"}